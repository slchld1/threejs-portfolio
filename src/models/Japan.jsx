/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Jellepostma (https://sketchfab.com/Jellepostma)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/japanese-restaurant-inakaya-97594e92c418491ab7f032ed2abbf596
Title: Japanese Restaurant "Inakaya"
*/

import React, { useState, useRef, useEffect } from 'react'
import { useFrame, useThree } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei'
import { a } from '@react-spring/three';

import japanScene from '../assets/3d/japanese_restaurant_inakaya.glb'

const Japan = (isRotating, setIsRotating, ...props) => {
  const japanRef = useRef();

//viewports
//User is able to view from the mouse POV

  const {gl, viewport } = useThree();

//Nodes and materials for the scene

  const { nodes, materials } = useGLTF(japanScene);

//Insert clicker + handle + evenlisteners

const lastXaxis = useRef(0);
const rotationSpeed = useRef(0);
const dampingFactor = 0.95;


const handlePointerDown = (event) => {
  event.stopPropagation();
  event.preventDefault();
  setIsRotating(true);

  const clientX = event.touches
  ? event.touches[0].clientX 
  : event.clientX;

  lastXaxis.current = clientX;
}
const handlePointerUp = (event) => {
  event.stopPropagation();
  event.preventDefault();
  setIsRotating(false);
}
const handlePointerMove = (event) => {
  event.stopPropagation();
  event.preventDefault();

  if(isRotating) {
    const clientX = event.touches 
    ? event.touches[0].clientX 
    : event.clientX;
  
    const delta = (clientX - lastXaxis.current) / viewport.width;
    japanRef.current.rotation.y += delta * 0.009 * Math.PI;
  
    lastXaxis.current = clientX;
  
    rotationSpeed.current = delta * 0.2 * Math.PI;
  }
}

useEffect(() => {
  document.addEventListener('pointerdown', handlePointerDown);
  document.addEventListener('pointerup', handlePointerUp);
  document.addEventListener('pointermove', handlePointerMove);

  return () => {
  document.removeEventListener('pointerdown', handlePointerDown);
  document.removeEventListener('pointerup', handlePointerUp);
  document.removeEventListener('pointermove', handlePointerMove);
  }
}, [ gl, handlePointerDown, handlePointerUp, handlePointerMove])





  return (
    <a.group ref={japanRef} {...props} >
            <group rotation={[-Math.PI / 2, 0, 2]} scale={.0085}>
        <group rotation={[Math.PI / 2, 1, 0]}>
          <group
            position={[1028.516, 304.858, 844.06]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={55}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Inakaya_Inakaya_final_0.geometry}
              material={materials.Inakaya_final}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Inakaya_Inakaya_final_0_1.geometry}
              material={materials.Inakaya_final}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Inakaya_Decals_0.geometry}
              material={materials.Decals}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Inakaya_Glass_0.geometry}
              material={materials.Glass}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Inakaya_II_Lamp_0.geometry}
              material={materials.II_Lamp}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Inakaya_Alphas_D_0.geometry}
              material={materials.Alphas_D}
            />
          </group>
        </group>
      </group>
    </a.group>
  )
}


export default Japan;